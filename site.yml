---
- name: Gather special node facts
  hosts: etcd_master
  become: true
  gather_facts: false

  tasks:
    - name: Gather all facts
      ansible.builtin.setup:

- name: Create TLS certificates for etcd
  hosts: tls_bastion

  roles:
    - generate_certs

- name: Deploy etcd on PostgreSQL nodes
  hosts: etcd
  become: true # Not needed for root but we won't use root later

  vars:
    etcd_master_group_name: "{{ postgresql_cluster_name }}"
    etcd_cluster: "{% for host in groups[etcd_master_group_name] %}{{ hostvars[host]['ansible_nodename'] }}={{ etcd_scheme }}{{ hostvars[host]['etcd_address_cluster'] }}:{{ etcd_port_peer }}{% if not loop.last %},{% endif %}{% endfor %}"  # yamllint disable-line rule:line-length
    etcd_cluster_name: "{{ postgresql_cluster_name  }}"
    etcd_iface_cluster: ens18

  roles:
    - role: zorlin.etcd_cluster
      etcd_secure: true

  post_tasks:
    - name: Remove temporary pki-dir folder from the Ansible controller # noqa run-once
      ansible.builtin.file:
        path: "{{ lookup('env', 'HOME') }}/pki-dir/"
        state: absent
      run_once: true
      delegate_to: localhost
      connection: local
      become: false
      when: groups['tls_bastion'][0] not in 'localhost'

- name: Deploy PostgreSQL and Patroni on PostgreSQL nodes
  hosts: postgresql
  become: true

  pre_tasks:
    - name: Check if repo-specific secrets file exists
      delegate_to: localhost
      connection: local
      become: false
      ansible.builtin.stat:
        path: "{{ playbook_dir }}/vars/secrets.yml"
      register: secrets_file

    - name: If repo-specific secrets file exists, load it in
      delegate_to: localhost
      connection: local
      become: false
      ansible.builtin.include_vars:
        file: "vars/secrets.yml"
      when: secrets_file.stat.exists

  roles:
    - patroni_system_user
    - patroni_certs
    - role: zorlin.patroni

- name: Ensure PostgreSQL users and databases are created
  hosts: postgresql

  pre_tasks:
    - name: Parse Patroni output to find who the current leader is and set it per cluster  # noqa run-once
      delegate_to: localhost
      connection: local
      run_once: true
      ansible.builtin.uri:
        url: "http://{{ item }}:8008/patroni"
        return_content: true
        validate_certs: false
      register: patroni_output_per_host
      loop: "{{ groups[postgresql_cluster_name] }}"

    - name: Find the host with the leader role and set fact  # noqa run-once
      delegate_to: "{{ item.item }}"
      delegate_facts: true
      run_once: true
      ansible.builtin.set_fact:
        is_patroni_leader: true
      loop: "{{ patroni_output_per_host.results }}"
      when: "(item.content | from_json).role == 'master'"
      no_log: true

  tasks:
    - name: Install acl package so we can become users
      ansible.builtin.package:
        name: acl
        state: present
      become: true
      when: is_patroni_leader is defined and is_patroni_leader

    - name: Create PostgreSQL roles
      community.postgresql.postgresql_user:
        name: "{{ item.name }}"
        password: "{{ item.password }}"
      loop: "{{ postgresql_users }}"
      become: true
      become_user: postgres
      no_log: true
      when: is_patroni_leader is defined and is_patroni_leader and postgresql_users is defined

    - name: Create PostgreSQL databases
      community.postgresql.postgresql_db:
        name: "{{ item.name }}"
        owner: "{{ item.owner }}"
      loop: "{{ postgresql_databases }}"
      become: true
      become_user: postgres
      when: is_patroni_leader is defined and is_patroni_leader and postgresql_databases is defined
